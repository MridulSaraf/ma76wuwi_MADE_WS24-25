pipeline WorldBankEconomyPipeline {

    WorldBankEconomyExtractor
        -> WorldBankEconomyXLSXInterpreter
        -> WorldBankEconomySheetpicker
        -> WorldBankRenameCountryCode
        -> WorldBankRenameGDPAndBond
        -> WorldBankEconomyDataRange
        -> WorldBankBondTableInterpreter
        -> WorldBankBondLoader;
    WorldBankEconomyDataRange
        -> WorldBankGDPTableInterpreter
        -> WorldBankGDPLoader;


    block WorldBankEconomyExtractor oftype HttpExtractor {
        url: "https://thedocs.worldbank.org/en/doc/7d852628d96b9411d43e5d36d5dff941-0050062022/original/Graphs-Chapter-5-02082022.xlsx";
    }

    block WorldBankEconomyXLSXInterpreter oftype XLSXInterpreter { }

    block WorldBankEconomySheetpicker oftype SheetPicker {
        sheetName: 'Figure S5.1.2';
    }

    block WorldBankRenameCountryCode oftype CellWriter {
        at: range P2:P2;
        write: [
            "Country Code",
        ];
    }

    block WorldBankRenameGDPAndBond oftype CellWriter {
        at: range R2:S2;
        write: [
            "GDP per Capita",
            "Bond Issuance Share"
        ];
    }

    block WorldBankEconomyDataRange oftype CellRangeSelector {
        select: range P2:S45;
    }


    block WorldBankBondTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "Country Code" oftype CountryCodeAlpha3,
            "Bond Issuance Share" oftype valueBetweenZeroAndOne
        ];
    }

    block WorldBankBondLoader oftype SQLiteLoader {

        table: "bondIssuance";
        file: "country-stats.sqlite";
    }

    block WorldBankGDPTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "Country Code" oftype CountryCodeAlpha3,
            "GDP per Capita" oftype positiveDecimal
        ];
    }

    block WorldBankGDPLoader oftype SQLiteLoader {
        table: "gdpPerCapita";
        file: "country-stats.sqlite";
    }
}


valuetype positiveDecimal oftype decimal {
    constraints: [
        positiveDecimalValidator
    ];
}
constraint positiveDecimalValidator on decimal: value > 0;

valuetype valueBetweenZeroAndOne oftype decimal {
    constraints: [
        valueBetweenZeroAndOneValidator
    ];
}
constraint valueBetweenZeroAndOneValidator on decimal: value >= 0 and value <= 1;
